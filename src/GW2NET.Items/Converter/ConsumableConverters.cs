//---------------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// <copyright file="SkinDataModel.cs" company="GW2.NET Coding Team">
//     This product is licensed under the GNU General Public License version 2 (GPLv2).
//     See the License in the project root folder or the following page: http://www.gnu.org/licenses/gpl-2.0.html
// </copyright>
//---------------------------------------------------------------------------------------------------------------------------

namespace GW2NET.Items.Converter
{
    using System;

    using GW2NET.Common;
    using GW2NET.Items.ApiModels;
    using GW2NET.Items.Consumables;

    /// <summary>Convertes a <see cref="ItemDataModel"/> into a <see cref="Consumable"/> object.</summary>
    public sealed partial class ConsumableConverter : IConverter<ItemDataModel, Consumable>
	{
	    private readonly ITypeConverterFactory<ItemDataModel, Consumable> converterFactory;

		/// <summary>Initalizes a new instance of the <see cref="ConsumableConverter"/> class.</summary>
        /// <param name="converterFactory">The <see cref="ITypeConverterFactory{TSource,TTarget}"/>.</param>
		public ConsumableConverter(ITypeConverterFactory<ItemDataModel, Consumable> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException(nameof(converterFactory));
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException(nameof(value));
    		}

			string discriminator = value.Details.Type;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to 'Consumable' (if any)
    	partial void Merge(Consumable entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class ConsumableConverter
		{
		    partial void Merge(Consumable entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

#region TeleportToFriend
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="TeleportToFriend"/>.</summary>
    public sealed partial class TeleportToFriendConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new TeleportToFriend();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'TeleportToFriend' (if any)
    	partial void Merge(TeleportToFriend entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class TeleportToFriendConverter
		{
		    partial void Merge(TeleportToFriend entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region Alcohol
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="Alcohol"/>.</summary>
    public sealed partial class AlcoholConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new Alcohol();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Alcohol' (if any)
    	partial void Merge(Alcohol entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class AlcoholConverter
		{
		    partial void Merge(Alcohol entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region AppearanceChanger
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="AppearanceChanger"/>.</summary>
    public sealed partial class AppearanceChangerConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new AppearanceChanger();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'AppearanceChanger' (if any)
    	partial void Merge(AppearanceChanger entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class AppearanceChangerConverter
		{
		    partial void Merge(AppearanceChanger entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ContractNpc
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="ContractNpc"/>.</summary>
    public sealed partial class ContractNpcConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new ContractNpc();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ContractNpc' (if any)
    	partial void Merge(ContractNpc entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class ContractNpcConverter
		{
		    partial void Merge(ContractNpc entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region Food
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="Food"/>.</summary>
    public sealed partial class FoodConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new Food();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Food' (if any)
    	partial void Merge(Food entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class FoodConverter
		{
		    partial void Merge(Food entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region GenericConsumable
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="GenericConsumable"/>.</summary>
    public sealed partial class GenericConsumableConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new GenericConsumable();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'GenericConsumable' (if any)
    	partial void Merge(GenericConsumable entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class GenericConsumableConverter
		{
		    partial void Merge(GenericConsumable entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region HalloweenConsumable
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="HalloweenConsumable"/>.</summary>
    public sealed partial class HalloweenConsumableConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new HalloweenConsumable();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'HalloweenConsumable' (if any)
    	partial void Merge(HalloweenConsumable entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class HalloweenConsumableConverter
		{
		    partial void Merge(HalloweenConsumable entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region ImmediateConsumable
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="ImmediateConsumable"/>.</summary>
    public sealed partial class ImmediateConsumableConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new ImmediateConsumable();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ImmediateConsumable' (if any)
    	partial void Merge(ImmediateConsumable entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class ImmediateConsumableConverter
		{
		    partial void Merge(ImmediateConsumable entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region Transmutation
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="Transmutation"/>.</summary>
    public sealed partial class TransmutationConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new Transmutation();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Transmutation' (if any)
    	partial void Merge(Transmutation entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class TransmutationConverter
		{
		    partial void Merge(Transmutation entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnknownConsumable
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="UnknownConsumable"/>.</summary>
    public sealed partial class UnknownConsumableConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new UnknownConsumable();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnknownConsumable' (if any)
    	partial void Merge(UnknownConsumable entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class UnknownConsumableConverter
		{
		    partial void Merge(UnknownConsumable entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnTransmutation
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="UnTransmutation"/>.</summary>
    public sealed partial class UnTransmutationConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new UnTransmutation();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnTransmutation' (if any)
    	partial void Merge(UnTransmutation entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class UnTransmutationConverter
		{
		    partial void Merge(UnTransmutation entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UpgradeRemoval
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="UpgradeRemoval"/>.</summary>
    public sealed partial class UpgradeRemovalConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new UpgradeRemoval();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UpgradeRemoval' (if any)
    	partial void Merge(UpgradeRemoval entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class UpgradeRemovalConverter
		{
		    partial void Merge(UpgradeRemoval entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region Utility
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="Utility"/>.</summary>
    public sealed partial class UtilityConverter : IConverter<ItemDataModel, Consumable>
    {
	    /// <inheritdoc />
        public Consumable Convert(ItemDataModel value, object state)
        {
    		var entity = new Utility();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'Utility' (if any)
    	partial void Merge(Utility entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class UtilityConverter
		{
		    partial void Merge(Utility entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

}
