//---------------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// <copyright file="SkinDataModel.cs" company="GW2.NET Coding Team">
//     This product is licensed under the GNU General Public License version 2 (GPLv2).
//     See the License in the project root folder or the following page: http://www.gnu.org/licenses/gpl-2.0.html
// </copyright>
//---------------------------------------------------------------------------------------------------------------------------

namespace GW2NET.Items.Converter
{
    using System;

    using GW2NET.Common;
    using GW2NET.Items.ApiModels;
    using GW2NET.Items.Gizmos;

    /// <summary>Convertes a <see cref="ItemDataModel"/> into a <see cref="Gizmo"/> object.</summary>
    public sealed partial class GizmoConverter : IConverter<ItemDataModel, Gizmo>
	{
	    private readonly ITypeConverterFactory<ItemDataModel, Gizmo> converterFactory;

		/// <summary>Initalizes a new instance of the <see cref="GizmoConverter"/> class.</summary>
        /// <param name="converterFactory">The <see cref="ITypeConverterFactory{TSource,TTarget}"/>.</param>
		public GizmoConverter(ITypeConverterFactory<ItemDataModel, Gizmo> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException(nameof(converterFactory));
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        public Gizmo Convert(ItemDataModel value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException(nameof(value));
    		}

			string discriminator = value.Details.Type;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to 'Gizmo' (if any)
    	partial void Merge(Gizmo entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class GizmoConverter
		{
		    partial void Merge(Gizmo entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

#region ContainerKey
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="ContainerKey"/>.</summary>
    public sealed partial class ContainerKeyConverter : IConverter<ItemDataModel, Gizmo>
    {
	    /// <inheritdoc />
        public Gizmo Convert(ItemDataModel value, object state)
        {
    		var entity = new ContainerKey();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'ContainerKey' (if any)
    	partial void Merge(ContainerKey entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class ContainerKeyConverter
		{
		    partial void Merge(ContainerKey entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region DefaultGizmo
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="DefaultGizmo"/>.</summary>
    public sealed partial class DefaultGizmoConverter : IConverter<ItemDataModel, Gizmo>
    {
	    /// <inheritdoc />
        public Gizmo Convert(ItemDataModel value, object state)
        {
    		var entity = new DefaultGizmo();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'DefaultGizmo' (if any)
    	partial void Merge(DefaultGizmo entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class DefaultGizmoConverter
		{
		    partial void Merge(DefaultGizmo entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region RentableContractNpc
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="RentableContractNpc"/>.</summary>
    public sealed partial class RentableContractNpcConverter : IConverter<ItemDataModel, Gizmo>
    {
	    /// <inheritdoc />
        public Gizmo Convert(ItemDataModel value, object state)
        {
    		var entity = new RentableContractNpc();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'RentableContractNpc' (if any)
    	partial void Merge(RentableContractNpc entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class RentableContractNpcConverter
		{
		    partial void Merge(RentableContractNpc entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnknownGizmo
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="UnknownGizmo"/>.</summary>
    public sealed partial class UnknownGizmoConverter : IConverter<ItemDataModel, Gizmo>
    {
	    /// <inheritdoc />
        public Gizmo Convert(ItemDataModel value, object state)
        {
    		var entity = new UnknownGizmo();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnknownGizmo' (if any)
    	partial void Merge(UnknownGizmo entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class UnknownGizmoConverter
		{
		    partial void Merge(UnknownGizmo entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

#region UnlimitedConsumable
    /// <summary>Converts objects of type <see cref="ItemDataModel"/> to objects of type <see cref="UnlimitedConsumable"/>.</summary>
    public sealed partial class UnlimitedConsumableConverter : IConverter<ItemDataModel, Gizmo>
    {
	    /// <inheritdoc />
        public Gizmo Convert(ItemDataModel value, object state)
        {
    		var entity = new UnlimitedConsumable();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to 'UnlimitedConsumable' (if any)
    	partial void Merge(UnlimitedConsumable entity, ItemDataModel dto, object state);

		/*
		// Use this template
		public partial class UnlimitedConsumableConverter
		{
		    partial void Merge(UnlimitedConsumable entity, ItemDataModel dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

}
