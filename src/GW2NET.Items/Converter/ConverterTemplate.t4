//---------------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:<#= Environment.Version #>
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// <copyright file="SkinDataModel.cs" company="GW2.NET Coding Team">
//     This product is licensed under the GNU General Public License version 2 (GPLv2).
//     See the License in the project root folder or the following page: http://www.gnu.org/licenses/gpl-2.0.html
// </copyright>
//---------------------------------------------------------------------------------------------------------------------------

namespace <#= ns #>
{
    using System;

    using GW2NET.Common;
	using <#= typeNamespace #>;
	using <#= targetNamespace #>;

    /// <summary>Convertes a <see cref="<#= sourceType #>"/> into a <see cref="<#= targetBaseType.Name #>"/> object.</summary>
    public sealed partial class <#= targetBaseType.Name #>Converter : IConverter<<#= sourceType #>, <#= targetBaseType.Name #>>
	{
	    private readonly ITypeConverterFactory<<#= sourceType #>, <#= targetBaseType.Name #>> converterFactory;

		/// <summary>Initalizes a new instance of the <see cref="<#= targetBaseType.Name #>Converter"/> class.</summary>
        /// <param name="converterFactory">The <see cref="ITypeConverterFactory{TSource,TTarget}"/>.</param>
		<#= constructorVisibility #> <#= targetBaseType.Name #>Converter(ITypeConverterFactory<<#= sourceType #>, <#= targetBaseType.Name #>> converterFactory)
		{
		    if (converterFactory == null)
    		{
    		    throw new ArgumentNullException(nameof(converterFactory));
    		}

		    this.converterFactory = converterFactory;
		}

		 /// <inheritdoc />
        public <#= targetBaseType.Name #> Convert(<#= sourceType #> value, object state)
		{
		    if (value == null)
    		{
    		    throw new ArgumentNullException(nameof(value));
    		}

			string discriminator = <#= string.Format(discriminator, "value") #>;
			var converter = this.converterFactory.Create(discriminator);
			var entity = converter.Convert(value, value);
			this.Merge(entity, value, state);
			return entity;
		}

		// Implement this method in a buddy class to set properties that are specific to '<#= targetBaseType.Name #>' (if any)
    	partial void Merge(<#= targetBaseType.Name #> entity, <#= sourceType #> dto, object state);

		/*
		// Use this template
		public partial class <#= targetBaseType.Name #>Converter
		{
		    partial void Merge(<#= targetBaseType.Name #> entity, <#= sourceType #> dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
	}

<#
    var targetTypes = GetSubTypes(targetBaseType);
    foreach (var targetType in targetTypes)
    {
#>
#region <#= targetType.Name #>
    /// <summary>Converts objects of type <see cref="<#= sourceType #>"/> to objects of type <see cref="<#= targetType.Name #>"/>.</summary>
    public sealed partial class <#= targetType.Name #>Converter : IConverter<<#= sourceType #>, <#= targetBaseType.Name #>>
    {
	    /// <inheritdoc />
        public <#= targetBaseType.Name #> Convert(<#= sourceType #> value, object state)
        {
    		var entity = new <#= targetType.Name #>();
            this.Merge(entity, value, state);
    		return entity;
        }

    	// Implement this method in a buddy class to set properties that are specific to '<#= targetType.Name #>' (if any)
    	partial void Merge(<#= targetType.Name #> entity, <#= sourceType #> dto, object state);

		/*
		// Use this template
		public partial class <#= targetType.Name #>Converter
		{
		    partial void Merge(<#= targetType.Name #> entity, <#= sourceType #> dto, object state)
			{
			    throw new NotImplementedException();
			}
		}
		*/
    }
#endregion

<#
    }
#>
}
<#+

    public Type[] GetSubTypes(Type baseType)
    {
        return baseType.Assembly.ExportedTypes.Where(t => t.BaseType == baseType && !t.IsAbstract).ToArray();
    }
#>